/**
 * Test the Sort class with various type parameters.
 */
class TypeTests is subclass of TestCase
types
	Collation = seq of char
	inv c == card elems c = len c;		-- No duplicates in a collation sequence

	String = seq of char;				-- Strings can be empty (and sort *before* everything else)

values
	codeChars:Collation = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";

	-- Collation sequence with numbers first
	backChars:Collation = "0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

functions
	valofCh: char * Collation -> nat1
	valofCh(c, collation) ==
		iota i in set inds collation & collation(i) = c
	pre c in set elems collation;

	lessCh: Collation -> char * char -> bool
	lessCh(collation)(a, b) ==
		valofCh(a, collation) < valofCh(b, collation);

	less: Collation -> String * String -> bool
	less(collation)(a, b) ==
		if a = [] and b = []
		then false
		else if a = [] or b = []
			then a = []
			else if a(1) <> b(1)
				then lessCh(collation)(a(1), b(1))
				else less(collation)(tl a, tl b)
	measure len a + len b;	-- Strictly decreasing

	ltint: int * int -> bool
	ltint(a, b) ==
		a < b;

	shorter: seq of char * seq of char -> bool
	shorter(a, b) ==
		len a < len b;


	-- Test functions for various types.

	test1: seq of int -> seq of int
	test1(list) == Sort`sort[int](list, ltint);

	test2: seq of seq of char -> seq of seq of char
	test2(list) == Sort`sort[seq of char](list, shorter);

	test3: seq of String -> seq of String
	test3(list) == Sort`sort[String](list, less(codeChars));

	test4: seq of char -> seq of char
	test4(list) == Sort`sort[char](list, lessCh(codeChars));

	test5: seq of char -> seq of char
	test5(list) == Sort`sort[char](list, lessCh(backChars));

operations
	protected runTest : () ==> ()
	runTest() ==
	(
		Assert`assertTrue("Integer sort1 failed!", test1([1,4,2,5,3,7,6,8]) = [1,2,3,4,5,6,7,8]);
		Assert`assertTrue("Length sort2 failed!", test2(["five", "two", "three"]) = ["two", "five", "three"]);
		Assert`assertTrue("String sort3 failed!", test3(["A", "BB", "c", ""]) = ["", "A", "BB", "c"]);
		Assert`assertTrue("Char sort4 failed!", test4("xyz123ABC") = "ABCxyz123");
		Assert`assertTrue("Char sort5 failed!", test5("abc123XYZ") = "123abcXYZ")
	)

traces
	SortInts:
		let V = {1,2,3,4,5} in
		let v1 in set V in
		let v2 in set V \ {v1} in
		let v3 in set V \ {v1, v2} in
		let v4 in set V \ {v1, v2, v3} in
		let v5 in set V \ {v1, v2, v3, v4} in
			test1([v1, v2, v3, v4, v5]);

	SortLengths:
		let V = {"abc", "ABC", "def", "ggdgdg", "zzz"} in
		let v1 in set V in
		let v2 in set V \ {v1} in
		let v3 in set V \ {v1, v2} in
		let v4 in set V \ {v1, v2, v3} in
		let v5 in set V \ {v1, v2, v3, v4} in
			test2([v1, v2, v3, v4, v5]);

	SortStrings:
		let V = {"abc", "ABC", "def", "ggdgdg", "zzz"} in
		let v1 in set V in
		let v2 in set V \ {v1} in
		let v3 in set V \ {v1, v2} in
		let v4 in set V \ {v1, v2, v3} in
		let v5 in set V \ {v1, v2, v3, v4} in
			test3([v1, v2, v3, v4, v5]);

	SortChars:
		let V = {'d', 'j', 'r', 's', 'w'} in
		let v1 in set V in
		let v2 in set V \ {v1} in
		let v3 in set V \ {v1, v2} in
		let v4 in set V \ {v1, v2, v3} in
		let v5 in set V \ {v1, v2, v3, v4} in
			test4([v1, v2, v3, v4, v5]);

	SortRevChars:
		let V = {'d', 'j', 'r', 's', 'w'} in
		let v1 in set V in
		let v2 in set V \ {v1} in
		let v3 in set V \ {v1, v2} in
		let v4 in set V \ {v1, v2, v3} in
		let v5 in set V \ {v1, v2, v3, v4} in
			test5([v1, v2, v3, v4, v5]);

end TypeTests
